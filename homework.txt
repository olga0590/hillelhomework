1. 'number' + 3 + 3;
    /*1) последовательность выполнения слева направо;
      2)'number' + 3  = 'number3', произойдет конкатенация, то есть приведение до строки, так как один из операндов это строка;
      3) 'number3' +3 = 'number33' аналогично по причине выполнения конкатенации;*/
 Результат: 'number' + 3 + 3 = 'number33'

2. null + 3;
   /*1) JS преобразует  null к 0;
     2) далее следует обычное математическое действие сложения;
Результат: 3;*/

3. 5 && "qwerty";
//Результат: "qwerty" так как последним в выражении стоит строка, будет выводится строка; 

4. +'40' + +'2' + "hillel";
/*1) последовательность выполнения слева направо;
  2)+'40' = 40, так как унарный + приводит значение строки до числа;
  3)+'2'= 2, также потому что унарный + привел значение строки к числу;
  4)получается выражение 40 + 2 + "hillel";*/
Результат: +'40' + +'2' + "hillel" = "42hillel" при причине конкатенации, так как один из операндов это строка; 
 

5.'10' - 5 === 6;
 /*1) первым действием интерпретатор приведет строку '10' к числу 10 , так как дальше идет оператор вычитания (-);
   2) дальше в выполнится арифметическое действие вычитания 10 - 5 = 5;
   3)  5 === 6 это выражение строгое сравнение, результатом которого будет false, так как 5 не равно 6;*/
Результат: false;


6. true + false;
   /*1) Интерпретатор приведет операнды к число;
     2) true = 1;
     3) false = 0;*/
Рузультат: true + false = 1 + 0 = 1;

7. '4px' - 3;
//Результат:  NaN, так как невозможно строку с буквами привести к числу и выполнить действие вычитания;

8. '4' - 3;
   /*1) значення строки '4' привелось к числу 4;
     2) выполнилось действие вычитание 4-3;*/
Результат: 1;

9. '6' + 3 ** 0;
   /*1) 3 ** 0 = 1, так как любое число в степени 0 будет равно 1;
     2) '6' + 1 = '61', произойдет конкатенация;*/
Результат: '61';

10. 12 / '6';
   /*1)так как используется оператор деления то интерпритатор приведет строку '6' к числу 6;
     2)следующим выполнится действие деления 12/6; */
Результат: 2;

11. '10' + (5 === 6);
    /*1) (5 === 6) в этом выражении выполняется строгое сравнение и результатом будет false;
      2) Далее следует конкатинация '10' + false;
Результат:  '10false';

12. '10' + (5 === 6);
    /*1) первым действием будет строгое сравнение 5 === 6 и результатом будет false;
      2) интерпритатор строку '10'  и false приведет к одному типу - к строке, так как оператор сложение  один из операндов строка, будет выполняться конкатинация '10' +  false = '10false';*/
Результат: '10false';

13) null == '';
   // Результатом будет false, так при проверке равенства null не ровняется никакому другому значению;

14) !!'false' == !!'true';
    /*1) !!'false' - результатом выражения будет true, так как ! конвертирует непустую строку в true, дальше !true будет false, а !false будет true;
      2) !!'true' - аналогично строка будет приведена к true, далее !true будет false, а !false будет true;
      3) далее следует выражение нестрогого сравнения true == true;*/
Результат: true;

15) 3 ** (9 / 3);
    /*1) первым действием будет деление (9 / 3) = 3;
      2) далее будет возведение в степень 3 ** 3;*/
Результат: 27;

16) 0 || '0' && 1;
    /*1) Оператор && имеет более высокий приоритет, потому выполнится первым выражение '0' && 1; 
      2) '0' - это не пустая строка, потому булевый эквивалент - true;
      3) 1 это также true;
      4) так как оператор && возвращает последнее значение, если все операнды true, то результатом выражения '0' && 1 будет 1;
      5) следующим будет выражение 0 || 1;
      6) оператор || возвращает первое true, так как 0 это false, а 1 это true, то вернется 1;*/
Результат: 1;

17) (+null == false) < 1;
    /*1) первым будет решение выражения (+null == false);
      2) так как унарный + старается привести все к числу, если операнд таким не является, то результатом +null будет 0;
      3) далее представляем false также как число 0;
      4) 0 == 0, результатом будет true;
      5) следующим будет действие сравнение true < 1;
      6) true представляем как 1;
      7) 1 < 1 результатом будет false;*/
Результат: false;

18) false && true || true;
    /*1) первым решаем выражение false && true, оператор "И" проверяет и возвращает первое false, потому результатом в этом выражении будет false;
     2) false || true, так как оператор "ИЛИ" возвращает первое true, то результатом будет true;*/
Результат: true;

19) false && (false || true);
   /*1) первым действием будет оператор "или" в скобках, так как "или" возвращает первое true в выражении, то результатом false || true будет true;
     2) вторым решение выражения false && true, так как оператор && возвращает false, если хотя бы один из операнд равно false, потому в выражении результатом будет false;*/
Результат: false;

20) (+null == false) < 1 ** 5;
   /*1) первым будет решение выражения (+null == false);
     2) так как унарный + старается привести все к числу, если операнд таким не является, то результатом +null будет 0;
     3) далее представляем false также как 0;
     4) 0 == 0, результатом будет true;
     5) далее нужно возвести 1 в степень 5, то есть решить выражение 1 ** 5, результатом будет 1;
     6) на выходе получаем выражение true < 1;
     7) так как true можно привести к числовому значению 1, получим 1 < 1 с результатом false, так как 1 не больше 1;
Результат: false;
